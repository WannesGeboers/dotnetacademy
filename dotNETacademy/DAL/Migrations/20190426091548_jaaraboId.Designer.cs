// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dotNETacademy.Data;

namespace dotNETacademy.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190426091548_jaaraboId")]
    partial class jaaraboId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("dotNETacademy.Areas.Identity.Data.Customer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Bedrijfsnaam");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int>("HuidigeCredits");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("dotNETacademy.Common.Entities.Credit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("PrijsPerCredit");

                    b.HasKey("Id");

                    b.ToTable("Credit");
                });

            modelBuilder.Entity("dotNETacademy.Common.Entities.Deelnemer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerId");

                    b.Property<string>("Naam");

                    b.Property<int>("OpenstaandeCredits");

                    b.Property<int?>("OpleidingId");

                    b.Property<string>("Voornaam");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OpleidingId");

                    b.ToTable("Deelnemer");
                });

            modelBuilder.Entity("dotNETacademy.Common.Entities.Factuur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BestandUrl");

                    b.Property<DateTime>("Datum");

                    b.Property<bool>("IsVereffend");

                    b.Property<int?>("JaarabonnementId");

                    b.Property<string>("Omschrijving");

                    b.Property<decimal>("Prijs");

                    b.HasKey("Id");

                    b.HasIndex("JaarabonnementId");

                    b.ToTable("Factuur");
                });

            modelBuilder.Entity("dotNETacademy.Common.Entities.Jaarabonnement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerId");

                    b.Property<DateTime>("Einddatum");

                    b.Property<int>("JaarAbonnementId");

                    b.Property<decimal>("Prijs");

                    b.Property<DateTime>("Startdatum");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("JaarAbonnementId");

                    b.ToTable("Jaarabonnement");
                });

            modelBuilder.Entity("dotNETacademy.Common.Entities.Opleiding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Beschrijving");

                    b.Property<int>("Credits");

                    b.Property<int?>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Opleiding");
                });

            modelBuilder.Entity("dotNETacademy.Common.Entities.TypeJaarabonnement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Omschrijving");

                    b.HasKey("Id");

                    b.ToTable("TypeJaarabonnement");
                });

            modelBuilder.Entity("dotNETacademy.Common.Entities.TypeOpleiding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Omschrijving");

                    b.HasKey("Id");

                    b.ToTable("TypeOpleiding");
                });

            modelBuilder.Entity("dotNETacademy.Models.Evaluatie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BestandLocatie");

                    b.Property<DateTime>("Datum");

                    b.Property<int>("DeelnemerId");

                    b.Property<string>("Omschrijving");

                    b.Property<double>("Punt");

                    b.HasKey("Id");

                    b.HasIndex("DeelnemerId");

                    b.ToTable("Evaluatie");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("dotNETacademy.Areas.Identity.Data.Customer")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("dotNETacademy.Areas.Identity.Data.Customer")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotNETacademy.Areas.Identity.Data.Customer")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("dotNETacademy.Areas.Identity.Data.Customer")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotNETacademy.Common.Entities.Deelnemer", b =>
                {
                    b.HasOne("dotNETacademy.Areas.Identity.Data.Customer")
                        .WithMany("Deelnemers")
                        .HasForeignKey("CustomerId");

                    b.HasOne("dotNETacademy.Common.Entities.Opleiding", "Opleiding")
                        .WithMany()
                        .HasForeignKey("OpleidingId");
                });

            modelBuilder.Entity("dotNETacademy.Common.Entities.Factuur", b =>
                {
                    b.HasOne("dotNETacademy.Common.Entities.Jaarabonnement")
                        .WithMany("Facturen")
                        .HasForeignKey("JaarabonnementId");
                });

            modelBuilder.Entity("dotNETacademy.Common.Entities.Jaarabonnement", b =>
                {
                    b.HasOne("dotNETacademy.Areas.Identity.Data.Customer")
                        .WithMany("Jaarabonnementen")
                        .HasForeignKey("CustomerId");

                    b.HasOne("dotNETacademy.Common.Entities.TypeJaarabonnement", "JaarAbonnement")
                        .WithMany()
                        .HasForeignKey("JaarAbonnementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotNETacademy.Common.Entities.Opleiding", b =>
                {
                    b.HasOne("dotNETacademy.Common.Entities.TypeOpleiding", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("dotNETacademy.Models.Evaluatie", b =>
                {
                    b.HasOne("dotNETacademy.Common.Entities.Deelnemer", "Deelnemer")
                        .WithMany("Evaluaties")
                        .HasForeignKey("DeelnemerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
